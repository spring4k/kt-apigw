spring:
  config:
    activate:
      on-profile: docker
      
  cloud:
    gateway:
      routes:
      - id: beast
        uri: http://localhost
        predicates:
          - Path=/**
        metadata:
          connect-timeout-timeout: 3000
          response-timeout: 5000
      # - id: api-service
      #   uri: http://localhost:8976/
      #   predicates:
      #     - Path=/mngt/v1/**
      #   filters:
      #     - name: CustomFilter
      httpclient:
        ssl:
          use-insecure-trust-manager: true
      x-forwarded:
        enabled: false
  # jpa :
  #   generate-ddl: false
  #   show-sql: false
  #   properties:
  #     hibernate:
  #       format_sql: true
  #       dialect: org.hibernate.dialect.PostgreSQLDialect
  #       default_batch_fetch_size: 100
  #   open-in-view: false
  #   hibernate:
  #       naming-strategy: org.hibernate.cfg.EJB3NamingStrategy
  #       naming:
  #         implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
  #         physical-strategy: com.ktds.act.apigw.common.config.NamingStrategy
  #       ddl-auto: none
  # datasource :
  #   driver-class-name: org.postgresql.Driver
  #   # url: jdbc:postgresql://act-apigw-db.cieq3xltmrqp.ap-northeast-2.rds.amazonaws.com:5432/APIGW?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&tinyInt1isBit=false
  #   # username: APIGW_USER
  #   # password: New1234!
  #   url: ENC(s4mlRO7+kDSt47xuK3OGJ1EZf98s9xEhHTKwd6F9m8ho1LnV3jhTUFcz2imviMaEdHKl/Z8IiYyZUWr4AF2l7hyUnaKXQdJjV+KIzRP7IRHuaJm3EPTFA0irkJCqcMAOo7gpJJHFvd3IhLVNkLnmzqRUMGkXa6AhOHjH0ohkT3RqWa65dDogVChDtFUGATdP+ARmjwZFTknD9JLYX9NQ9gH3vQgUe9dd6h8Jjqe+NICJobDxxY/QtWprpgUktkM6UOJ8njtUkyQ=)
  #   username: ENC(5nQuBxAXCm+GNMwSAyfxRwJ0e2YjQJIs)
  #   password: ENC(yItjIPJHK4aixPoWCDuKe4PSi3y3MBoh)
  #   hikari:
  #     maximum-pool-size: 20
  #     connection-timeout: 5000
  #     validation-timeout: 4000
  #     max-lifetime: 600000
  #   type: com.zaxxer.hikari.HikariDataSource
  lifecycle:
    timeout-per-shutdown-phase: 1m
  data:
    mongodb:
      uri: mongodb://43.200.39.6:27371
      database: SI
      username: ENC(dEuI70A1CicQq8L1WAQ1+Tr1LKmE8bM2) # act_user
      password: ENC(ns7HzPTw77u+K0AWYf5MOgCezWxtI06n) # sksmsahffk1!
      autoIndexCreation: true
  redis:
    host: localhost
    port: 6379
    # password: new1234!
    password: ENC(pWS8ZNSb28tTsN7f6FVdKQyLzAEG0S4b)
    cluster:
      use : false
      nodes:
      - 3.39.240.78:6379
      - 3.39.240.78:6380
      - 3.39.240.78:6381
      # - localhost:6380
      # - localhost:6381
      # - localhost:6382
  autoconfigure:
    exclude:
    - org.redisson.spring.starter.RedissonAutoConfiguration

## Encrypt/Decrypt
jasypt:
  encryptor:
    bean: stringEncryptor

resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true
      
## actuator
management:
  health:
    db:
      enabled: true
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include:
        - health
        - api
        - system
        - handler
        - metrics
        - gateway
  endpoint:
    gateway:
      enabled: true
    health:
      show-details: always

## logging
logging:
  file:
    name: apigw
    path: /home/ubuntu/apigw/log
  level:
    root: INFO

common:
  crypto:
    jasypt:
      salt: UVZCSklFY3ZWeURzZ3F6c2hManNtcFF1
    sha512:
      salt: UVZCSklFY3ZWeURzZ3F6c2hManNtcFF1
  system:
    schedule:
      dbSync: 10 # 서킷브레이커 동일 설정
  api:
    schedule:
      dbSync: 10
  service:
    auth:
      ktjwt:
        planKey: f831c284d1e9ca5ce9204c73a8035bcaf5d2eaa47088ca7af41deb18fc82e37f
        encKey: rXp6+/ZlhZu2Vl02Yc2EY9/7d8zl5IlG7kax4++GyGH7NXjnS50Ol/EdpdLLC9uEgu7254gEspH4r/gE4fHGOVIP+sWS6aBMdk4YR4ULhBE=
    sla:
      db: none # LOCAL / REDIS / MONGODB
      cache: SLA
    schedule:
     dbSync: 10
  handler:
    schedule:
      dbSync: 10
  memory:
    schedule:
      dbSync: 10
  token:
    schedule:
      dbSync: 10
  file:
    mountPath:
  log:
    template:
      templType: JSON # JSON / XML / QUERYSTRING
      ### 템플릿 변수 ###
      # 공통.어플리케이션 ID : {{{comn.applId}}}
      # 공통.호스트 명 : {{{comn.hostNm}}}
      # 공통.호스트 IP : {{{comn.hostIp}}}
      # 공통.트랜젝션 ID : {{{comn.txId}}}
      # 공통.API.시스템 ID : {{{comn.api.sysId}}}
      # 공통.API.API ID : {{{comn.api.apiId}}}
      # 공통.API.API 번호 : {{{comn.api.ifNo}}}
      # 요청.시작 시각 : {{{req.stTm}}}
      # 요청.종료 시각 : {{{req.endTm}}}
      # 요청.서비스 ID : {{{req.svcId}}}
      # 요청.인증키 : {{{req.userNm}}}
      # 요청.서비스 IP : {{{req.svcIp}}}
      # 요청.메소드 : {{{req.meth}}}
      # 요청.URI : {{{req.in}}}
      # 요청.헤더 : {{{req.head}}}
      # IN.메시지.헤더 : {{{cstmLog.inMsg-head}}}
      # IN.요청.헤더 : {{{cstmLog.inReq-head}}}
      # OUT.요청.헤더 : {{{cstmLog.outReq-head}}}
      # IN.메시지.바디 : {{{cstmLog.inMsg-body}}}
      # IN.요청.바디 : {{{cstmLog.inReq-body}}}
      # OUT.요청.바디 : {{{cstmLog.outReq-body}}}
      # 요청.쿼리파람 : {{{req.queryParam}}}
      # 응답.시작 시각 : {{{res.stTm}}}
      # 응답.종료 시각 : {{{res.endTm}}}
      # 응답.헤더 : {{{res.head}}}
      # 응답.바디 : {{{res.body}}}
      # IN.응답.헤더 : {{{cstmLog.inRes-head}}}
      # OUT.응답.헤더 : {{{cstmLog.outRes-head}}}
      # IN.응답.바디 : {{{cstmLog.inRes-body}}}
      # OUT.응답.바디 : {{{cstmLog.outRes-body}}}
      # 응답.결과 : {{{res.rslt}}}
      # 응답.에러 코드 : {{{res.errLevel}}}
      # 응답.에러 코드 : {{{res.errCd}}}
      # 응답.에러 메시지 : {{{res.errMsg}}}
      # 응답.상태 코드 : {{{res.sttusCd}}}
      # JSON 예) '{ "comn": { "applId": "{{{comn.applId}}}", "hostNm": "{{{comn.hostNm}}}", "hostIp": "{{{comn.hostIp}}}", "txId": "{{{comn.txId}}}" }, "req": { "stTm": "{{{req.stTm}}}", "endTm": "{{{req.endTm}}}", "sysId": "{{{req.sysId}}}", "apiId": "{{{req.apiId}}}", "svcId": "{{{req.svcId}}}", "svcIp": "{{{req.svcIp}}}", "meth": "{{{req.meth}}}", "uri": "{{{req.uri}}}", "head": "{{{req.head}}}", "body": "{{{req.body}}}" }, "res": { "stTm": "{{{res.stTm}}}", "endTm": "{{{res.endTm}}}", "head": "{{{res.head}}}", "body": "{{{res.body}}}", "rslt": "{{{res.rslt}}}", "errCd": "{{{res.errCd}}}", "errMsg": "{{{res.errMsg}}}", "sttusCd": "{{{res.sttusCd}}}" } }'
      # XML 예) '<?xml version="1.0" encoding="UTF-8" ?> <log> <comn> <applId>{{{comn.applId}}}</applId> <hostNm>{{{comn.hostNm}}}</hostNm> <hostIp>{{{comn.hostIp}}}</hostIp> <txId>{{{comn.txId}}}</txId> </comn> <req> <stTm>{{{req.stTm}}}</stTm> <endTm>{{{req.endTm}}}</endTm> <sysId>{{{req.sysId}}}</sysId> <apiId>{{{req.apiId}}}</apiId> <svcId>{{{req.svcId}}}</svcId> <svcIp>{{{req.svcIp}}}</svcIp> <meth>{{{req.meth}}}</meth> <uri>{{{req.uri}}}</uri> <head>{{{req.head}}}</head> <body>{{{req.body}}}</body> </req> <res> <stTm>{{{res.stTm}}}</stTm> <endTm>{{{res.endTm}}}</endTm> <head>{{{res.head}}}</head> <body>{{{res.body}}}</body> <rslt>{{{res.rslt}}}</rslt> <errCd>{{{res.errCd}}}</errCd> <errMsg>{{{res.errMsg}}}</errMsg> <sttusCd>{{{res.sttusCd}}}</sttusCd> </res> </log>'
      # Querystring 예) 'comn.applId={{{comn.applId}}}&comn.hostNm={{{comn.hostNm}}}&comn.hostIp={{{comn.hostIp}}}&comn.txId={{{comn.txId}}}&req.stTm={{{req.stTm}}}&req.endTm={{{req.endTm}}}&req.sysId={{{req.sysId}}}&req.apiId={{{req.apiId}}}&req.svcId={{{req.svcId}}}&req.svcIp={{{req.svcIp}}}&req.meth={{{req.meth}}}&req.uri={{{req.uri}}}&req.head={{{req.head}}}&req.body={{{req.body}}}&res.stTm={{{res.stTm}}}&res.endTm={{{res.endTm}}}&res.head={{{res.head}}}&res.body={{{res.body}}}&res.rslt={{{res.rslt}}}&res.errCd={{{res.errCd}}}&res.errMsg={{{res.errMsg}}}&res.sttusCd={{{res.sttusCd}}}'
      logFormat:
        inMsg: '{ "timestamp": "{{{req.stTm}}}", "service": "OG081701", "operation": "{{{comn.api.apiId}}}", "transactionId": "{{{comn.txId}}}", "logType": "IN_MSG", "payload": "<![CDATA[{{{cstmLog.inMsg-body}}}]]>", "caller": { "channel": "{{{req.userNm}}}", "channelIp": "{{{req.svcIp}}}" }, "host": { "ip": "{{{comn.hostIp}}}", "name": "{{{comn.hostNm}}}" }, "response": { "type": "{{{res.errLevel}}}", "code": "{{{res.errCd}}}", "desc": "{{{res.errMsg}}}" }, "user": { "ip": "{{{req.svcIp}}}" }, "custom": { "cl_header": "{{{cstmLog.inMsg-head}}}" } }'
        inReq: '{ "timestamp": "{{{req.stTm}}}", "service": "OG081701", "operation": "{{{comn.api.apiId}}}", "transactionId": "{{{comn.txId}}}", "logType": "IN_REQ", "payload": "<![CDATA[{{{cstmLog.inReq-body}}}]]>", "caller": { "channel": "{{{req.userNm}}}", "channelIp": "{{{req.svcIp}}}" }, "host": { "ip": "{{{comn.hostIp}}}", "name": "{{{comn.hostNm}}}" }, "response": { "type": "I" }, "user": { "ip": "{{{req.svcIp}}}" }, "custom": { "cl_tlsVersion": "TLSv1.2", "cl_seq": "{{{cstmLog.inReq-seq}}}", "cl_authType": "idpw", "cl_header": "{{{cstmLog.inReq-head}}}", "cl_userAgent": "PostmanRuntime/7.26.1", "cl_subsystem": "AG" } }'
        outReq: '{ "timestamp": "{{{req.endTm}}}", "service": "OG081701", "operation": "{{{comn.api.apiId}}}", "transactionId": "{{{comn.txId}}}", "logType": "OUT_REQ", "payload": "<![CDATA[{{{cstmLog.outReq-body}}}]]>", "caller": { "channel": "{{{req.userNm}}}", "channelIp": "{{{req.svcIp}}}" }, "host": { "ip": "{{{comn.hostIp}}}", "name": "{{{comn.hostNm}}}" }, "response": { "type": "I" }, "user": { "ip": "{{{req.svcIp}}}" }, "destination": { "name": "{{{comn.api.sysId}}}" }, "custom": { "cl_tlsVersion": "TLSv1.2", "cl_seq": "{{{cstmLog.inReq-seq}}}", "cl_authType": "idpw", "cl_header": "{{{cstmLog.outReq-head}}}", "cl_userAgent": "PostmanRuntime/7.26.1", "cl_subsystem": "AG" } }'
        outRes: '{ "timestamp": "{{{res.stTm}}}", "service": "OG081701", "operation": "{{{comn.api.apiId}}}", "transactionId": "{{{comn.txId}}}", "logType": "OUT_RES", "payload": "<![CDATA[{{{cstmLog.outRes-body}}}]]>", "caller": { "channel": "{{{req.userNm}}}", "channelIp": "{{{req.svcIp}}}" }, "host": { "ip": "{{{comn.hostIp}}}", "name": "{{{comn.hostNm}}}" }, "response": { "type": "{{{res.errLevel}}}", "code": "{{{res.errCd}}}", "desc": "{{{res.errMsg}}}" }, "user": { "ip": "{{{req.svcIp}}}" }, "destination": { "name": "{{{comn.api.sysId}}}" }, "custom": { "cl_tlsVersion": "TLSv1.2", "cl_seq": "{{{cstmLog.outRes-seq}}}", "cl_authType": "idpw", "cl_header": "{{{cstmLog.outRes-head}}}", "cl_userAgent": "PostmanRuntime/7.26.1", "cl_subsystem": "AG" } }'
        inRes: '{ "timestamp": "{{{res.endTm}}}", "service": "OG081701", "operation": "{{{comn.api.apiId}}}", "transactionId": "{{{comn.txId}}}", "logType": "IN_RES", "payload": "<![CDATA[{{{cstmLog.inRes-body}}}]]>", "caller": { "channel": "{{{req.userNm}}}", "channelIp": "{{{req.svcIp}}}" }, "host": { "ip": "{{{comn.hostIp}}}", "name": "{{{comn.hostNm}}}" }, "response": { "type": "{{{res.errLevel}}}", "code": "{{{res.errCd}}}", "desc": "{{{res.errMsg}}}" }, "user": { "ip": "{{{req.svcIp}}}" }, "custom": { "cl_tlsVersion": "TLSv1.2", "cl_seq": "{{{cstmLog.inReq-seq}}}", "cl_authType": "idpw", "cl_header": "{{{cstmLog.inRes-head}}}", "cl_userAgent": "PostmanRuntime/7.26.1", "cl_subsystem": "AG" } }'
      # - '{ "comn": { "applId": "{{{comn.applId}}}", "hostNm": "{{{comn.hostNm}}}", "hostIp": "{{{comn.hostIp}}}", "txId": "{{{comn.txId}}}" }, "req": { "stTm": "{{{req.stTm}}}", "endTm": "{{{req.endTm}}}", "sysId": "{{{req.sysId}}}", "apiId": "{{{req.apiId}}}", "svcId": "{{{req.svcId}}}", "svcIp": "{{{req.svcIp}}}", "meth": "{{{req.meth}}}", "uri": "{{{req.uri}}}", "head": "{{{req.head}}}", "body": "{{{req.body}}}", "queryParam": "{{{req.queryParam}}}" }, "res": { "stTm": "{{{res.stTm}}}", "endTm": "{{{res.endTm}}}", "head": "{{{res.head}}}", "body": "{{{res.body}}}", "rslt": "{{{res.rslt}}}", "errCd": "{{{res.errCd}}}", "errMsg": "{{{res.errMsg}}}", "sttusCd": "{{{res.sttusCd}}}" } }'
      # - '<?xml version="1.0" encoding="UTF-8" ?> <log> <comn> <applId>{{{comn.applId}}}</applId> <hostNm>{{{comn.hostNm}}}</hostNm> <hostIp>{{{comn.hostIp}}}</hostIp> <txId>{{{comn.txId}}}</txId> </comn> <req> <stTm>{{{req.stTm}}}</stTm> <endTm>{{{req.endTm}}}</endTm> <sysId>{{{req.sysId}}}</sysId> <apiId>{{{req.apiId}}}</apiId> <svcId>{{{req.svcId}}}</svcId> <svcIp>{{{req.svcIp}}}</svcIp> <meth>{{{req.meth}}}</meth> <uri>{{{req.uri}}}</uri> <head>{{{req.head}}}</head> <body>{{{req.body}}}</body> <queryParam>{{{req.queryParam}}}</queryParam> </req> <res> <stTm>{{{res.stTm}}}</stTm> <endTm>{{{res.endTm}}}</endTm> <head>{{{res.head}}}</head> <body>{{{res.body}}}</body> <rslt>{{{res.rslt}}}</rslt> <errCd>{{{res.errCd}}}</errCd> <errMsg>{{{res.errMsg}}}</errMsg> <sttusCd>{{{res.sttusCd}}}</sttusCd> </res> </log>'
      # - comn.applId={{{comn.applId}}}&comn.hostNm={{{comn.hostNm}}}&comn.hostIp={{{comn.hostIp}}}&comn.txId={{{comn.txId}}}&req.stTm={{{req.stTm}}}&req.endTm={{{req.endTm}}}&req.sysId={{{req.sysId}}}&req.apiId={{{req.apiId}}}&req.svcId={{{req.svcId}}}&req.svcIp={{{req.svcIp}}}&req.meth={{{req.meth}}}&req.uri={{{req.uri}}}&req.head={{{req.head}}}&req.body={{{req.body}}}&req.queryParam={{{req.queryParam}}}&res.stTm={{{res.stTm}}}&res.endTm={{{res.endTm}}}&res.head={{{res.head}}}&res.body={{{res.body}}}&res.rslt={{{res.rslt}}}&res.errCd={{{res.errCd}}}&res.errMsg={{{res.errMsg}}}&res.sttusCd={{{res.sttusCd}}}
    masking:
      enabled: true
      rule:
        all: ["idfyNo","payMethIdfyNo"]
        fixed: ["CONTENT","ENC_CONTENT","ENC_MAP_DATA","ENCRYPTIONPASSWORD","KTFE_ENCKEY","LTS_CONTENT","MDPASSWORD","MSG_CONTENT","NEW_PASSWORD","NEW_PWD","NEWENCRYPTIONPASSWORD","OLD_PASSWORD","OLDPASSWORD","PARTY_ID_NUMBER","PARTY_ID_NUMBER1","PARTY_ID_NUMBER2","PARTY_IDENTIFICATION_NUMBER","PARTY_IDTF_NUMBER","PARTYIDENTIFICATIONNUMBER","PARTYIDNUMBER","PARTYIDTFNUMBER","PARTYSECONDARYIDENTIFICATIONNUMBER","PARTYSECONDIDNUMBER","PARTYSECONDIDTFNUMBER","PASSWORD","PLAINTEXT","PWD","SEC_ADDR","SEC_POI","SEC_X","SEC_Y","SHAPASSWORD","SMSMESSAGE","SOCIAL_SECURITY_NUMBER","SSN","SUBJECT","temp_pwd","TEMPPASSWORD","timeCodi_pwd","UserData","X","Y"]
      format:
        XML: ["BOKU","DCB","GEAR","KOS","KOS_OUT_SOAP","MM7","OUT_SOAP","OUT_XML","SB","SCAP","SDP","SHUB","XML"]
        JSON: ["ADP_IN_JSON","ADP_OUT_JSON","AMAP","ANY_IN_JSON","ANY_OUT_JSON","ATON","BCC","BIZNARU","CUPI","DMS","ECNV","JSON","KOS_OUT_JSON","KOSMOS","OAUTH","OCPI"]
        QUERYSTRING: ["ANY_OUT_QUERYSTRING","CAPRI"]
        KHUB: ["KHUB"]
        LNLV: ["KIC"]
        TEXT: ["OUT_PLAIN"]
    contentType:
      XML:
      - application/xml
      JSON:
      - application/json
      - application/vnd.spring-boot.actuator.v3+json
      QUERYSTRING:
      - application/x-www-form-urlencoded
    enabled:
      transaction: true
      traffic: true
      
data:
  system:
  - sysId: MNGT
    edpt:
      prot: HTTP
      atrib:
        url: 
        - http://43.200.30.176:8081
  api:
  - sysId: MNGT
    apiId: beastPortal
    ifNo: AGW-0001
    ver: v1
    meth:
    - GET
    - PUT
    - POST
    - DELETE
    in: /mngt/v1/**
    out:
    reqHndlr:
    resHndlr:
    errHndlr:
    timeOut: 10000
  - sysId: MNGT
    apiId: apiLinkDply
    ifNo: AGW-0002
    ver: v1
    meth:
    - GET
    - PUT
    - POST
    - DELETE
    in: /apilink/v1/**
    out:
    reqHndlr: ["REQ.KT-AUTH"]
    resHndlr:
    errHndlr:
    timeOut: 10000